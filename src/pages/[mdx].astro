---
import supabase from "../components/SupabaseClient";
import Layout from "../layouts/Layout.astro";
import { Markdown } from "astro-remote";
import { compile } from "'@mdx-js/mdx'
const components = await Astro.glob('../components/**/*.astro');

export async function getStaticPaths() {
  const { data: fileNames, error: fileListError } = await supabase.storage
  .from("astro-markdown")
  .list('mdx');

  let files = [];
  if (fileNames == null){
    return [];
  }
  for (let i = 0; i < fileNames.length; i++) {
    let file = fileNames[i].name.split('.').shift();
    let fileType = fileNames[i].name.split('.').pop();
    if (file == ""){
      continue;
    } else {
    files.push({params: {fileName: file}, props: { type: "." + fileType}}, );
    }
  }
  console.log(files);
  return files;
}

const { fileName } = Astro.params;
const { type } = Astro.props;

if (!fileName) {
  return Astro.redirect("/404");
}

const { data, error } = await supabase.storage
  .from("astro-markdown")
  .download("mdx/" + fileName + type);

if (error) {
  return Astro.redirect("/404");
}

const file = await compile(data);

// const blob = data;
// const buffer = Buffer.from(await blob.arrayBuffer()).toString();

// const file = new File([data], fileName + type, {type: data.type,});
// const buffer = Buffer.from(await file.arrayBuffer()).toString();
// import  Content  from '../components/[file].astro';

// const componentsList = [];
// for (let i = 0; i < components.length; i++) {
//   componentsList.push('{' + components[i].file.split('/').pop()?.split('.').shift() + '.default' +'},');
//   console.log(...componentsList);
// }


---
<Layout title={fileName}>
  <Fragment set:html={file} />
</Layout>